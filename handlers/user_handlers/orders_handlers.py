import aiogram.exceptions
from aiogram import F
from keyboards.keyboards import *
from loader import dp, db, bot
from states.states import PayDelivery
from aiogram.fsm.context import FSMContext
from utils.some_shit import set_bucket_text, send_couriers, send_admins
import time
import random


@dp.message(F.text == '‚ö°Ô∏è –ö–æ—à–∏–∫')
async def my_bucket(message: types.Message):
    bucket = await db.get_bucket(message.chat.id)
    if bucket['bucket'] is None:
        await message.answer('–í–∞—à –∫–æ—à–∏–∫ –ø—É—Å—Ç–∏–π! –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —É —Ä–æ–∑–¥—ñ–ª—ñ <b>üõí –ö–∞—Ç–∞–ª–æ–≥</b>',
                             reply_markup=menu(message.chat.id))
    else:
        for good in bucket['bucket']:
            try:
                item = await db.get_good_by_good_id(good[1])
                if item['amount'] <= 0:
                    await message.answer('üò© –û–¥–∏–Ω –∑ —Ç–æ–≤–∞—Ä—ñ–≤ —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –í–∞—Å –≤ –∫–æ—à–∏–∫—É –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π.'
                                         ' –ú–∏ –≤–∏–º—É—à–µ–Ω—ñ –æ—á–∏—Å—Ç–∏—Ç–∏ –í–∞—à –∫–æ—à–∏–∫.'
                                         ' –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑–∞–Ω–æ–≤–æ.')
                    await db.clear_bucket(message.chat.id)
                    return
            except TypeError:
                await message.answer('üò© –û–¥–∏–Ω –∑ —Ç–æ–≤–∞—Ä—ñ–≤ —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –í–∞—Å –≤ –∫–æ—à–∏–∫—É –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π.'
                                     ' –ú–∏ –≤–∏–º—É—à–µ–Ω—ñ –æ—á–∏—Å—Ç–∏—Ç–∏ –í–∞—à –∫–æ—à–∏–∫.'
                                     ' –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑–∞–Ω–æ–≤–æ.')
                await db.clear_bucket(message.chat.id)
                return

        answer = await set_bucket_text(bucket)
        await message.answer(answer[0], reply_markup=pay_delivery())


@dp.callback_query(F.data == 'pay_delivery')
async def delivery_get_address(call: types.CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    await call.message.answer('üîó –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏.', reply_markup=cancel_delivery())
    await state.set_state(PayDelivery.q1)


@dp.callback_query(F.data == 'clear_bucket')
async def clear_bucket(call: types.CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–∏–π.', reply_markup=menu(call.message.chat.id))
    await db.clear_bucket(call.message.chat.id)


@dp.message(F.text, PayDelivery.q1)
async def delivery_get_contact(message: types.Message, state: FSMContext):
    print(await state.get_state())
    if await state.get_state() != 'PayDelivery:q2':
        address = message.text
        await state.update_data({'q1': address})
        data = await state.get_data()
        if data.get('q3'):
            await show_final(message, state)
            return

    await message.answer('üë§ –ó–∞–ª–∏—à—Ç–µ —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.', reply_markup=cancel_delivery())
    await state.set_state(PayDelivery.q2)


@dp.message(F.text, PayDelivery.q2)
async def delivery_get_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if await state.get_state() != 'PayDelivery:q3':
        contact = message.text
        await state.update_data({"q2": contact})
        if data.get('q3'):
            await show_final(message, state)
            return

    await message.answer("‚úçüèª –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –∑–∞–ª–∏—à—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∫—É—Ä'—î—Ä–∞.", reply_markup=cancel_delivery(comment=True))
    await state.set_state(PayDelivery.q3)


@dp.callback_query(F.data == 'no_comments', PayDelivery.q3)
async def delivery_no_comments(call: types.CallbackQuery, state: FSMContext):
    comment = "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"
    await state.update_data({'q3': comment})
    await show_final(call.message, state)


@dp.message(F.text, PayDelivery.q3)
async def delivery_comments(message: types.Message, state: FSMContext):
    comment = message.text
    await state.update_data({'q3': comment})
    await show_final(message, state)


async def show_final(message: types.Message, state: FSMContext):
    # addrs = await db.get_random_addr()
    # rand_addrs = random.choice(addrs)
    # await state.update_data({'q1': rand_addrs['address']})

    # –†–æ—è–ª—Ç—ñ –±—É–ª–æ —Ö–æ—Ä–æ—à–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º

    data = await state.get_data()
    await state.set_state(PayDelivery.q3)
    await message.answer(f'<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å:</b>\n'
                         f'\n<b>–ê–¥—Ä–µ—Å–∞:</b> <i>{data["q1"]}</i>'
                         f'\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:</b> <i>{data["q2"]}</i>'
                         f"\n<b>–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∫—É—Ä'—î—Ä–∞:</b> <i>{data['q3']}</i>",
                         reply_markup=change_values())


@dp.callback_query(F.data == 'change_address')
async def change_address(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await state.set_state(PayDelivery.q1)
    await delivery_get_address(call, state)


@dp.callback_query(F.data == 'change_contact')
async def change_contact(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await state.set_state(PayDelivery.q2)
    await delivery_get_contact(call.message, state)


@dp.callback_query(F.data == 'change_comment')
async def change_comment(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await state.set_state(PayDelivery.q3)
    await delivery_get_comment(call.message, state)


@dp.callback_query(F.data == 'cancel_delivery')
async def cancel_delivery_func(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('–í—ñ–¥–º—ñ–Ω–∞!', reply_markup=menu(call.message.chat.id))


@dp.callback_query(F.data == 'confirm_delivery', PayDelivery.q3)
async def pay_delivery_func(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await state.set_state(PayDelivery.q4)
    customer_data = await state.get_data()
    bucket = await db.get_bucket(call.message.chat.id)
    delivery_price = await db.get_price()
    total_price = 0
    text = '<b>–¢–æ–≤–∞—Ä–∏:</b>\n\n'

    for item in bucket['bucket']:
        good = await db.get_good_by_good_id(item[1])
        text += f"‚ö°Ô∏è<b>{good['good_name']}</b>\n"
        text += f"üí∏ <b>–¶—ñ–Ω–∞:</b> {good['price'] * item[2]}–ì–†–ù\n"
        text += f"üìë <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {item[2]}\n\n"
        total_price += good['price'] * item[2]

    order_id = await db.add_order(call.message.chat.id,
                                  customer_data['q1'],
                                  customer_data['q2'],
                                  customer_data['q3'],
                                  bucket['bucket'],
                                  total_price)

    text += f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: <b>{total_price}–ì–†–ù</b> + <b>{delivery_price}–ì–†–ù</b> —Ü—ñ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
    await call.message.answer(text, reply_markup=check_pay(call.message.chat.id, order_id))


@dp.callback_query(F.data.startswith('c|'), PayDelivery.q4)
async def check_pay_func(call: types.CallbackQuery, state: FSMContext):
    c, user_id, order_id = call.data.split("|")
    # status = await mono.get_receipt(order_id+user_id[0:2])
    # print(status)
    delivery_price = await db.get_price()
    work_time = await db.get_work_time()
    order = await db.get_order_by_id(int(order_id))

    # if status is False:
    #     await call.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!')
    # else:
        # if status['sum'] == 0.1:
        # if status['sum'] == delivery_price:
        #     await call.answer('–û–ø–ª–∞—Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–∞!')
    time_now = time.strftime('%H')
    print(time_now)
    if (work_time[0] <= int(time_now) < work_time[1]) is False:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer(f"<b>–ë–æ—Ç –∑–∞—Ä–∞–∑ –Ω–µ –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É —Ä–∞–±–æ—á–∏–π —á–∞—Å –∑ 10 –¥–æ 21.</b>",
                                  reply_markup=menu(call.message.chat.id))
        await state.clear()
    else:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer(f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–∞—Ä–µ–≥—ñ—Å—Ç—Ä—ñ—Ä–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫—É—Ä'—î—Ä–∞.</b>\n\n"
                                  f"‚ö°Ô∏è–í—ñ–∑—å–º—ñ—Ç—å –¥–æ —É–≤–∞–≥–∏, —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —É —Ä–∞–±–æ—á–∏–π —á–∞—Å –∑ 10 –¥–æ 21.",
                                  reply_markup=menu(call.message.chat.id))
        for item in order['bucket']:
            await db.subtract_amount_goods(int(item[1]), int(item[2]))


        await db.change_order_status(int(order_id), 1)
        await db.clear_bucket(call.message.chat.id)
        await send_couriers(int(order_id))
        await send_admins(int(order_id))
        await state.clear()
