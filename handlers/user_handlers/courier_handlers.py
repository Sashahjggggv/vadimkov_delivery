import aiogram.exceptions
from aiogram import F
from loader import dp, db, bot
from keyboards.keyboards import *
from aiogram.filters import Command
import time
from datetime import datetime


@dp.callback_query(F.data.startswith("t|"))
async def take_order(call: types.CallbackQuery):
    couriers = await db.check_if_courier(call.message.chat.id)
    if not couriers:
        await call.answer("–í–∏ –Ω–µ –∫—É—Ä'—î—Ä")
    else:
        t, courier_id, order_id = call.data.split("|")
        order = await db.get_order_by_id(int(order_id))
        if order is None:
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            await call.message.answer('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.')
        else:
            is_available = await db.if_courier_is_available(int(courier_id))
            if len(is_available) > 0:
                await call.message.answer(f'–í–∏–∫–æ–Ω–∞–π—Ç–µ –º–∏–Ω—É–ª–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –≤–∑—è—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ! ({[item["order_id"] for item in is_available]})')
            else:
                if order['courier'] is None:
                    await db.change_order_status(int(order_id), 2)
                    await db.set_courier_for_order(int(order_id), call.message.chat.id)

                    # USER
                    try:
                        # ADMINS
                        for admin in admins:
                            try:
                                await bot.send_message(admin, f"‚ö°Ô∏è–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤–∑—è—Ç–µ –∫—É—Ä'—î—Ä–æ–º id:<code>{call.message.chat.id}</code>.",
                                                       reply_markup=admin_order_notify(courier_id))
                            except aiogram.exceptions.TelegramBadRequest:
                                pass

                        # COURIER
                        try:
                            await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                                                reply_markup=courier_kb(user_id=order['user_id'],
                                                                                        courier_id=call.message.chat.id,
                                                                                        order_id=order_id,
                                                                                        delivering=True))
                            await call.message.answer(f'–í–∏ –≤–∑—è–ª–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –î–æ—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ —É –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —Å—Ç—Ä–æ–∫–∏ —Ç–∞ –Ω–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"')

                            await db.change_order_status(int(order_id), 2)
                            await bot.send_message(order['user_id'], f"‚ö°Ô∏è–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤–∑—è—Ç–µ –∫—É—Ä'—î—Ä–æ–º.\n", reply_markup=menu(order['user_id']))
                        except aiogram.exceptions.TelegramBadRequest:
                            await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                                                reply_markup=courier_kb(courier_id=call.message.chat.id,
                                                                                        order_id=order_id,
                                                                                        delivering=True))
                    except aiogram.exceptions.TelegramForbiddenError:
                        pass
                else:
                    await bot.delete_message(call.message.chat.id, call.message.message_id)
                    await call.message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∑—è—Ç–µ —ñ–Ω—à–∏–º –∫—É—Ä'—î—Ä–æ–º", reply_markup=menu(call.message.chat.id))


@dp.callback_query(F.data.startswith("d|"))
async def delivered_order(call: types.CallbackQuery):
    couriers = await db.check_if_courier(call.message.chat.id)
    if not couriers:
        await call.answer("–í–∏ –Ω–µ –∫—É—Ä'—î—Ä")
    else:
        d, courier_id, order_id = call.data.split("|")
        order = await db.get_order_by_id(int(order_id))
        if order['status'] == 3:
            await call.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        else:
            await db.change_order_status(int(order_id), 3)
            now = datetime.now()
            now = now.strftime('%Y-%m-%d %H:%M:%S')
            converted_now = datetime.strptime(now, '%Y-%m-%d %H:%M:%S')
            await db.set_order_time(int(order_id), converted_now)
            await db.add_earn_courier(order['price'], call.message.chat.id)
            await db.add_earn_stat(order['price'])
            await db.add_completed(call.message.chat.id)
            try:
                await bot.delete_message(call.message.chat.id, call.message.message_id)
            except (Exception,):
                pass
            await call.message.answer('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!', reply_markup=menu(call.message.chat.id))
            try:
                await bot.send_message(order['user_id'], f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! –î—è–∫—É—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º!',
                                   reply_markup=menu(order['user_id']))
            except aiogram.exceptions.TelegramForbiddenError:
                pass
            for admin in admins:
                try:
                    await bot.send_message(admin, f"–ö—É—Ä'—î—Ä –¥–æ—Å—Ç–∞–≤–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}",
                                           reply_markup=admin_order_notify(courier_id))
                except aiogram.exceptions.TelegramBadRequest:
                    pass


@dp.message(F.text, Command('tasks'))
async def get_tasks(message: types.Message):
    if await db.check_if_courier(message.chat.id):
        tasks = await db.get_free_tasks()
        print(len(tasks))
        print(tasks)
        if len(tasks) == 0:
            await message.answer('–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.', reply_markup=menu(message.chat.id))
        else:
            await message.answer(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:', reply_markup=orders_list(tasks))


@dp.callback_query(F.data.startswith("o|"))
async def get_free_order(call: types.CallbackQuery):
    if await db.check_if_courier(call.message.chat.id):
        o, order_id = call.data.split("|")
        order = await db.get_order_by_id(int(order_id))
        text = f'‚ö°Ô∏è <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>(–ö–æ–¥:<code>{str(order_id) + str(order["user_id"])[0:2]}</code>)\n\n'
        total_price = 0
        try:
            for item in order['bucket']:
                good = await db.get_good_by_good_id(item[1])
                text += f"‚ö°Ô∏è<b>–¢–æ–≤–∞—Ä:</b> {good['good_name']}\n"
                text += f"üí∏ <b>–¶—ñ–Ω–∞:</b> {good['price'] * item[2]}\n"
                text += f"üìë <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {item[2]}\n\n"
                total_price += good['price'] * item[2]

            text += f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: <b>{total_price}–ì–†–ù</b>\n"
            text += f'–ê–¥—Ä–µ—Å–∞: <b><code>{order["address"]}</code></b>\n'
            text += f'–ö–æ–Ω—Ç–∞–∫—Ç: <b>{order["contact"]}</b>\n'
            text += f'–ö–æ–º–µ–Ω—Ç–∞—Ä: <b>{order["comment"]}</b>\n'

            try:
                await call.message.answer(text, reply_markup=courier_kb(user_id=order['user_id'],
                                                                        courier_id=call.message.chat.id,
                                                                        order_id=order_id))
            except aiogram.exceptions.TelegramBadRequest:
                await call.message.answer(text, reply_markup=courier_kb(user_id=False,
                                                                        courier_id=call.message.chat.id,
                                                                        order_id=order_id))
        except TypeError:
            await call.answer('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å. –¢–æ–≤–∞—Ä–∞ –Ω–µ —ñ—Å–Ω—É—î.')
            try:
                await bot.send_message(order["user_id"], f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ–º–æ–∂–ª–∏–≤–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏. –¢–æ–≤–∞—Ä–∞ –Ω–µ —ñ—Å–Ω—É—î.',
                                       reply_markup=menu(order['user_id']))
                await db.change_order_status(int(order_id), 3)
            except aiogram.exceptions.TelegramForbiddenError:
                pass
